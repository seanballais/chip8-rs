use std::fs;

pub struct Chip8 {
	v: [u8; 16],
	i_reg: u16,
	delay_reg: u8,
	sound_reg: u8,
	pc: u16,
	sp: u8,
	stack: [u16; 16],
	mem: [u8; 4096],
	pub disp_mem: [u64; 32] // Each 64-bit integer represents one display row.
}

impl Chip8 {
	pub fn new() -> Self {
		let mut mem: [u8; 4096] = [0x0; 4096];
		let font_mem: &mut [u8] = &mut mem[0..80];
		font_mem.copy_from_slice(&[
			0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
			0x20, 0x60, 0x20, 0x20, 0x70, // 1
			0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
			0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
			0x90, 0x90, 0xF0, 0x10, 0x10, // 4
			0xF0, 0x80, 0xF0, 0x90, 0xF0, // 5
			0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
			0xF0, 0x10, 0x20, 0x40, 0x40, // 7
			0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
			0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
			0xF0, 0x90, 0xF0, 0x90, 0x90, // A
			0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
			0xF0, 0x80, 0x80, 0x80, 0xF0, // C
			0xE0, 0x90, 0x90, 0x90, 0xE0, // D
			0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
			0xF0, 0x80, 0xF0, 0x80, 0x80  // F
		]);

		let mut vm = Chip8 {
			v: [0; 16],
			i_reg: 0x0,
			delay_reg: 0x0,
			sound_reg: 0x0,
			pc: 0x200,
			sp: 0x0,
			stack: [0x0; 16],
			mem: mem,
			disp_mem: [0x0; 32]
		};

        vm
	}

	pub fn load_rom(&mut self, rom_file_path: &str)
	{
		*self = Self::new();

		// Load ROM file.
		let contents = match fs::read(rom_file_path) {
			Err(e) => {
				println!("Unable to read file: '{0}'. Error: {1}",
						 rom_file_path, e);
                std::process::exit(0);
			},
            Ok(f) => f,
		};

        self.mem[0x200..0x200 + contents.len()].copy_from_slice(&contents[..]);
	}
}